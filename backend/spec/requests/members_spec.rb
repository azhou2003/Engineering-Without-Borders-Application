require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/members", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Member. As you add validations to Member, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      first_name: "John",
      last_name: "Doe",
      uin: 132123555,
      major: "Comp Sci",
      year: 2025,
      email: "ajzhou2003@tamu.edu",
      phone: 1234567890,
      tshirt_size: "S",
      aggie_ring_day: Date.today,
      birthday: Date.today,
      graduation_day: Date.today
    }
  }

  let(:invalid_attributes) {
    {
      first_name: "John",
      last_name: "Doe",
      uin: 132123555,
      major: "Comp Sci",
      year: "junior",
      email: "ajzhou2003tamu.edu",
      phone: 1234567890,
      tshirt_size: "S",
      aggie_ring_day: Date.today,
      birthday: Date.today,
      graduation_day: Date.today
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # MembersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Member.create! valid_attributes
      get members_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      member = Member.create! valid_attributes
      get member_url(member), as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /member" do
    it "returns members with grouped interests" do
      interest1 = Interest.create!(name: "Coding", interest_type: "career")
      interest2 = Interest.create!(name: "Music", interest_type: "career")

      member = Member.create!(valid_attributes)
      member.member_interests.create!(interest: interest1)
      member.member_interests.create!(interest: interest2)

      get "/members"

      expect(response).to have_http_status(:success)
      json_response = JSON.parse(response.body)

      expect(json_response).to be_an(Array)

      # Find the specific member in the response
      member_data = json_response.find { |m| m["uin"] == member.uin } # or m["id"] if you use ID

      expect(member_data).to include(
        "interests" => {
          "career" => [
            { "id" => interest1.id, "name" => interest1.name },
            { "id" => interest2.id, "name" => interest2.name }
          ]
        }
      )
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Member" do
        expect {
          post members_url,
               params: { member: valid_attributes }, headers: valid_headers, as: :json
        }.to change(Member, :count).by(1)
      end

      it "renders a JSON response with the new member" do
        post members_url,
             params: { member: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Member" do
        expect {
          post members_url,
               params: { member: invalid_attributes }, as: :json
        }.to change(Member, :count).by(0)
      end

      it "renders a JSON response with errors for the new member" do
        post members_url,
             params: { member: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:member) { Member.create!(valid_attributes) }

      context "as a president" do
        let(:new_attributes) {
          {
            role: "new_role",
            archived: true,
            accepted: true,
            accomplishments: "New accomplishment"
          }
        }

        it "updates the member's role and other permitted attributes" do
          patch member_url(member), params: { member: new_attributes }, headers: { 'Role' => 'president' }, as: :json
          member.reload

          expect(member.role).to eq("new_role")
          expect(member.archived).to be true
          expect(member.accepted).to be true
          # expect(member.accomplishments).to eq("New accomplishment")
        end
      end

      context "as a vice president" do
        let(:new_attributes) {
          {
            role: "another_role",
            accepted: true,
            accomplishments: "Another accomplishment"
          }
        }

        it "updates the member's accepted and accomplishments attributes" do
          patch member_url(member), params: { member: new_attributes }, headers: { 'Role' => 'vice_president' }, as: :json
          member.reload

          expect(member.role).to eq("another_role")
          expect(member.accepted).to be true
          expect(member.accomplishments).to eq("Another accomplishment")
        end
      end

      context "as a treasurer" do
        let(:new_attributes) {
          {
            paid_dues: true
          }
        }

        it "updates the paid_dues attribute" do
          patch member_url(member), params: { member: new_attributes }, headers: { 'Role' => 'treasurer' }, as: :json
          member.reload

          expect(member.paid_dues).to be true
        end
      end

      context "as internal relations" do
        let(:new_attributes) {
          {
            archived: true,
            accepted: false
          }
        }

        it "updates the archived and accepted attributes" do
          patch member_url(member), params: { member: new_attributes }, headers: { 'Role' => 'internal_relations' }, as: :json
          member.reload

          expect(member.archived).to be true
          expect(member.accepted).to be false
        end
      end

      context "as a regular member" do
        let(:new_attributes) {
          {
            first_name: "John3",
            last_name: "Doe3",
            major: "Computer Science"
          }
        }

        it "updates the member's basic attributes" do
          patch member_url(member), params: { member: new_attributes }, headers: { 'Role' => 'regular' }, as: :json
          member.reload

          expect(member.first_name).to eq("John3")
          expect(member.last_name).to eq("Doe3")
          expect(member.major).to eq("Computer Science")
        end
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the member" do
        member = Member.create! valid_attributes
        patch member_url(member),
              params: { member: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "archives the member if not already archived" do
      member = Member.create! valid_attributes.merge(archived: false)

      expect {
        delete member_url(member), headers: valid_headers, as: :json
      }.not_to change(Member, :count) # The member should not be destroyed

      # Reload the member to check if it has been archived
      member.reload
      expect(member.archived).to be true
    end

    it "destroys the member if already archived" do
      member = Member.create! valid_attributes.merge(archived: true)

      expect {
        delete member_url(member), headers: valid_headers, as: :json
      }.to change(Member, :count).by(-1) # The member should be destroyed
    end
  end
end
